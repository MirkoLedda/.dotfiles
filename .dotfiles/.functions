# Git add & commit on a single command
function gitac() {
    git add --all && git commit -m "$*"
}

# Deep cleanup - recursive search and remove all files listed in "cleanup.list"
function cleanup() {
    file="$HOME/.dotfiles/cleanup.list"
    if [ -f "$file" ]; then
        for f in $(cat "$file") ; do
            find $HOME -type f -name "$f" -ls -delete
        done
        echo "... all neat and tidy"
    else
        echo "no cleanup list found"
    fi
}

function deepcleanup() {
    cleanup
    rm -rf $HOME/.cache/*
}

# Create a compressed tarball, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
            stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
            stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Extract most know archives with one command
extract () {
    if [ -f "$1" ] ; then
        case "$1" in
            *.tar.bz2)   tar -xvjf "$1"     ;;
            *.tar.gz)    tar -xvzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar -e "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar -xvf "$1"      ;;
            *.tbz2)      tar -xvjf "$1"     ;;
            *.tgz)       tar -xvzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z -x "$1"        ;;
            *)     echo "$1 cannot be extracted via extract()" ;;
        esac
    else
        echo "$1 is not a valid file"
    fi
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
    if [[ $OSTYPE == linux* ]]; then
        if [ $# -eq 0 ]; then
            xdg-open .;
        else
            xdg-open "$@";
        fi;
    elif [[ $OSTYPE == darwin* ]]; then
        if [ $# -eq 0 ]; then
            open .;
        else
            open "$@";
        fi;
    fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Compress PDF files
function compresspdf() {
    gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -sOutputFile="$2" "$1"
}

# Delete git branches both locally and on the remote
function gitdelimb() {
    if [ $# -ne 0 ]; then
        git branch -d "$@";
        git push origin --delete "$@";
    fi;
    git prune;
    git remote prune origin;
}
